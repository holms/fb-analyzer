version: '3.8'

services:
  # Traefik - Reverse Proxy & Load Balancer
  traefik:
    image: traefik:v2.9
    command:
      - "--api.insecure=true"  # Enable the dashboard (in production, set to false)
      - "--providers.docker=true"  # Enable Docker as the provider
      - "--providers.docker.exposedbydefault=false"  # Don't expose containers by default
      - "--entrypoints.web.address=:80"  # Define an entrypoint for HTTP
    ports:
      - "80:80"  # HTTP
      - "8080:8080"  # Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Mount the Docker socket
    networks:
      - fb-analyzer-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.fb-analyzer.localhost`)"
      - "traefik.http.routers.traefik.service=api@internal"

  # API Gateway
  fb-analyzer-api-gateway:
    build:
      context: ./services/fb-analyzer-api-gateway
    depends_on:
      - traefik
      - mysql
      - redis
    environment:
      - DATABASE_URL=mysql://user:password@mysql:3306/fb_analyzer
      - REDIS_URL=redis://redis:6379
    networks:
      - fb-analyzer-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=Host(`api.fb-analyzer.localhost`)"
      - "traefik.http.services.api-gateway.loadbalancer.server.port=8000"

  # Auth Service
  fb-analyzer-auth-service:
    build:
      context: ./services/fb-analyzer-auth-service
    depends_on:
      - mysql
      - redis
    environment:
      - DATABASE_URL=mysql://user:password@mysql:3306/fb_analyzer
      - REDIS_URL=redis://redis:6379
    networks:
      - fb-analyzer-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-service.rule=Host(`auth.fb-analyzer.localhost`)"
      - "traefik.http.services.auth-service.loadbalancer.server.port=8000"

  # Event Fetcher Service (renamed from Post Fetcher)
  fb-analyzer-event-fetcher:
    build:
      context: ./services/fb-analyzer-post-fetcher  # Keep the directory name for now
    depends_on:
      - mysql
      - redis
    environment:
      # Database connection
      - DATABASE_URL=mysql://user:password@mysql:3306/fb_analyzer
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=fb_analyzer
      - DB_USER=user
      - DB_PASSWORD=password
      
      # Redis connection
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # Facebook API credentials
      - FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
      - FACEBOOK_APP_SECRET=${FACEBOOK_APP_SECRET}
      - FACEBOOK_ACCESS_TOKEN=${FACEBOOK_ACCESS_TOKEN}
      
      # Service configuration
      - LOG_LEVEL=info
      - FETCH_INTERVAL=3600  # Fetch events every hour (in seconds)
      - MAX_PAGES_PER_FETCH=10
      - MAX_EVENTS_PER_PAGE=100
    networks:
      - fb-analyzer-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.event-fetcher.rule=Host(`event-fetcher.fb-analyzer.localhost`)"
      - "traefik.http.services.event-fetcher.loadbalancer.server.port=8000"

  # Event Analyzer Service (renamed from Post Analyzer)
  fb-analyzer-event-analyzer:
    build:
      context: ./services/fb-analyzer-post-analyzer  # Keep the directory name for now
    depends_on:
      - mysql
      - redis
    environment:
      - DATABASE_URL=mysql://user:password@mysql:3306/fb_analyzer
      - REDIS_URL=redis://redis:6379
    networks:
      - fb-analyzer-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.event-analyzer.rule=Host(`event-analyzer.fb-analyzer.localhost`)"
      - "traefik.http.services.event-analyzer.loadbalancer.server.port=8000"

  # Notification Service
  fb-analyzer-notification-service:
    build:
      context: ./services/fb-analyzer-notification-service
    depends_on:
      - redis
    environment:
      - REDIS_URL=redis://redis:6379
    networks:
      - fb-analyzer-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notification-service.rule=Host(`notifications.fb-analyzer.localhost`)"
      - "traefik.http.services.notification-service.loadbalancer.server.port=8000"

  # Data Processor
  fb-analyzer-data-processor:
    build:
      context: ./services/fb-analyzer-data-processor
    depends_on:
      - redis
      - mysql
    environment:
      - DATABASE_URL=mysql://user:password@mysql:3306/fb_analyzer
      - REDIS_URL=redis://redis:6379
    networks:
      - fb-analyzer-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.data-processor.rule=Host(`data-processor.fb-analyzer.localhost`)"
      - "traefik.http.services.data-processor.loadbalancer.server.port=8000"

  # Frontend
  fb-analyzer-frontend:
    build:
      context: ./services/fb-analyzer-frontend
    environment:
      - REACT_APP_API_BASE_URL=http://api.fb-analyzer.localhost/api
      - REACT_APP_FACEBOOK_API_VERSION=v18.0
      - REACT_APP_FACEBOOK_APP_ID=${FACEBOOK_APP_ID}
    volumes:
      - ./services/fb-analyzer-frontend:/app
      - /app/node_modules
    networks:
      - fb-analyzer-network
    depends_on:
      - traefik
      - fb-analyzer-api-gateway
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`fb-analyzer.localhost`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  # MySQL Database
  mysql:
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=fb_analyzer
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
    volumes:
      - mysql-data:/var/lib/mysql
      - ./infrastructure/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fb-analyzer-network
    labels:
      - "traefik.enable=false"  # Don't expose MySQL to Traefik

  # Redis for Queue
  redis:
    image: redis:6.2-alpine
    volumes:
      - redis-data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - fb-analyzer-network
    labels:
      - "traefik.enable=false"  # Don't expose Redis to Traefik

networks:
  fb-analyzer-network:
    driver: bridge

volumes:
  mysql-data:
  redis-data:
